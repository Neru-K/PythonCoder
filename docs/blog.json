{
    "dir": [
        {
            "contestgenre": "ABC",
            "contests": [
                {
                    "name": "abc246",
                    "problemset": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e",
                        "f",
                        "g",
                        "ex"
                    ],
                    "problems": {
                        "c": {
                            "title": "C - Coupon",
                            "body": [
                                {
                                    "tag": "h2",
                                    "text": "解法 2パターンに場合わけしてシミュレーション"
                                },
                                {
                                    "tag": "p",
                                    "text": "Aを下記の2パターンに場合わけして考える必要がある。\n・商品の値段がクーポンの金額以上である場合（A[i] >= X の場合）\n・商品の値段がクーポンの金額未満である場合（A[i] < X の場合）\n\nしかし、上記の場合わけをしながらシミュレーションをしていくと条件分岐が意外と複雑になってしまう。\nそのため、いったんクーポンがK枚しかないという点を無視し、「各商品においてクーポンを無駄なく使い切れる枚数の総和」をcとして算出しておく。\nその上で下記のように場合わけをする。\n\n「各商品においてクーポンを無駄なく使い切れる枚数の総和」をcとした場合、\n\n・c >= 実際に所持しているクーポンの枚数（K）である *Point1\n・c < 実際に所持しているクーポンの枚数（K）である *Point2\n\n上記2点で場合わけをする理由は、Point1のパターンではクーポンをフルに使い切ったとしても無駄なく使い切れて端数を生まない一方、Point2のパターンは端数を生んでしまうためできる限り端数を少なく使い切りたいからである。\n（たとえば800円の商品に1000円のクーポンを使用したら、200円は端数となり値引き金額として計上できない）\n\nであるからして、Point2の場合にはできる限り端数を少なくしたい → 端数の大きな金額順にソートしてから順番に使用していきたい、ということになる。\nそのため各商品の端数を代入しておくリストmodsを定義しておき、それを降順にソートする。 *Point3"
                                },
                                {
                                    "tag": "code",
                                    "text": "print(sum)"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "c",
                    "problems": {
                        "title": "#C - Monotonically Increasing",
                        "body": [
                            {
                                "tag": "code",
                                "text": ""
                            },
                            {
                                "tag": "h2",
                                "text": "解説を見る前に考えたこと"
                            },
                            {
                                "tag": "p",
                                "text": "・順列全列挙する？\n・順列前列挙って途中で条件分岐仕込めたりするのかな？\n・普通にfor文回す？\n・でもNの数が変わるからfor文仕込めるかな？\n・ループの数がM回になるのはどうしたら？再帰？"
                            },
                            {
                                "tag": "h2",
                                "text": "解説を見た後に考えたこと"
                            },
                            {
                                "tag": "p",
                                "text": "・再起で実装するのは合ってた\n・なんで実装する前に答えを見ちゃうんだろう・・・\n・脳死で書けるように写経するのもいいかも\n・再起関数の引数に何を渡す？"
                            },
                            {
                                "tag": "h2",
                                "text": "他の人の解答を見た後に考えたこと"
                            },
                            {
                                "tag": "p",
                                "text": "・conbinationsなんてものがあるのか！\n・順列と組み合わせどちらもあるのは知らなかった\n・どうやって使うんだろう？\n・print(*c)の*ってどういう意味？"
                            },
                            {
                                "tag": "code",
                                "text": ""
                            },
                            {
                                "tag": "code",
                                "text": "from itertools import combinations"
                            },
                            {
                                "tag": "code",
                                "text": ""
                            },
                            {
                                "tag": "code",
                                "text": "N, M = map(int, input().split())"
                            },
                            {
                                "tag": "code",
                                "text": "for c in combinations(range(1, M + 1), N):"
                            },
                            {
                                "tag": "code",
                                "text": "    print(*c)"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "contestgenre": "ARC",
            "contests": []
        },
        {
            "contestgenre": "AGC",
            "contests": []
        },
        {
            "contestgenre": "ATC",
            "contests": []
        },
        {
            "contestgenre": "TYPICAL90",
            "contests": []
        },
        {
            "contestgenre": "TESSOKU-BOOK",
            "contests": []
        }
    ]
}